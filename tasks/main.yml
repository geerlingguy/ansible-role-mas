---
- name: Ensure MAS is installed.
  homebrew: name=mas state=present

- name: Get MAS account status
  command: mas account
  register: mas_account_result
  failed_when: mas_account_result.rc > 1
  check_mode: false
  changed_when: false

- name: Sign in to MAS when email and password are provided.
  command: 'mas signin "{{ mas_email }}" "{{ mas_password }}"'
  register: mas_signin_result
  when:
    - mas_account_result.rc == 1
    - mas_email | bool
    - mas_password | bool
    - not mas_signin_dialog

- name: Sign in to MAS when email is provided, and complete password and 2FA using dialog.
  command: 'mas signin "{{ mas_email }}" "{{ mas_password }}" --dialog'
  register: mas_signin_result
  when:
    - mas_signin_dialog
    - mas_account_result.rc == 1
    - mas_email | bool

- block:
  - name: Read list of desired MAS apps from CSV file.
    read_csv:
      path: "{{ mas_installed_apps_list_file }}"
      fieldnames: id,name
      delimiter: ','
    register: mas_desired_apps
    ignore_errors: yes

  - name: Merge the list of desired MAS apps.
    set_fact: mas_installed_apps={{ mas_installed_apps|default([]) | union(mas_desired_apps.list) }}
    when: mas_desired_apps is defined

  - name: Remove duplicates of desired MAS apps.
    set_fact:
      mas_installed_apps: "{{ mas_installed_apps | unique | list }}"
    ignore_errors: yes
  # end block
  when:  mas_installed_apps_list_file is defined and mas_installed_apps_list_file != ''
  delegate_to: localhost

- name: List installed MAS apps.
  command: mas list
  register: mas_list
  check_mode: false
  changed_when: false

- name: Ensure configured MAS apps are installed.
  command: mas install "{{ item.id|default(item) }}"
  with_items: "{{ mas_installed_apps + mas_installed_app_ids }}"
  when: (item.id | default(item) | string) not in mas_list.stdout

- name: Upgrade all apps (if configured).
  command: mas upgrade
  when: mas_upgrade_all_apps
